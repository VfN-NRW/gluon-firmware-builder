From a2d2ced538c4e09d9a74d3f81ff29425ceee85b1 Mon Sep 17 00:00:00 2001
From: RubenKelevra <ruben@vfn-nrw.de>
Date: Tue, 19 Jul 2016 16:15:11 +0200
Subject: [PATCH] update batman-adv patches after routing repo update

---
 .../routing/0001-alfred-adjust-intervals.patch     |  4 +-
 ...atman-adv-introduce-no_rebroadcast-option.patch | 96 +++++++++++++---------
 ...batman-adv-decrease-maximum-fragment-size.patch | 19 +++--
 ...e-interface-but-also-a-link-local-address.patch | 62 --------------
 .../0005-alfred-use-batman-adv-visdata.patch       | 83 -------------------
 5 files changed, 72 insertions(+), 192 deletions(-)
 delete mode 100644 patches/packages/routing/0004-alfred-not-only-wait-for-the-interface-but-also-a-link-local-address.patch
 delete mode 100644 patches/packages/routing/0005-alfred-use-batman-adv-visdata.patch

diff --git a/patches/packages/routing/0001-alfred-adjust-intervals.patch b/patches/packages/routing/0001-alfred-adjust-intervals.patch
index aabb165..d44b32a 100644
--- a/patches/packages/routing/0001-alfred-adjust-intervals.patch
+++ b/patches/packages/routing/0001-alfred-adjust-intervals.patch
@@ -4,13 +4,13 @@ Subject: alfred: adjust intervals
 
 diff --git a/alfred/patches/0001-alfred-adjust-intervals.patch b/alfred/patches/0001-alfred-adjust-intervals.patch
 new file mode 100644
-index 0000000..df70eea
+index 0000000..a5860db
 --- /dev/null
 +++ b/alfred/patches/0001-alfred-adjust-intervals.patch
 @@ -0,0 +1,15 @@
 +--- a/alfred.h
 ++++ b/alfred.h
-+@@ -33,10 +33,10 @@
++@@ -34,10 +34,10 @@
 + #include "list.h"
 + #include "packet.h"
 + 
diff --git a/patches/packages/routing/0002-batman-adv-introduce-no_rebroadcast-option.patch b/patches/packages/routing/0002-batman-adv-introduce-no_rebroadcast-option.patch
index f4745ca..f564a01 100644
--- a/patches/packages/routing/0002-batman-adv-introduce-no_rebroadcast-option.patch
+++ b/patches/packages/routing/0002-batman-adv-introduce-no_rebroadcast-option.patch
@@ -3,13 +3,13 @@ Date: Thu, 2 Apr 2015 20:24:14 +0200
 Subject: batman-adv: introduce 'no_rebroadcast' option
 
 diff --git a/batman-adv/files/lib/netifd/proto/batadv.sh b/batman-adv/files/lib/netifd/proto/batadv.sh
-index 632a209..01f567f 100644
+index 1e0c9d0..d0ab238 100644
 --- a/batman-adv/files/lib/netifd/proto/batadv.sh
 +++ b/batman-adv/files/lib/netifd/proto/batadv.sh
-@@ -6,16 +6,19 @@ init_proto "$@"
- 
+@@ -7,19 +7,22 @@ init_proto "$@"
  proto_batadv_init_config() {
  	proto_config_add_string "mesh"
+ 	proto_config_add_string "routing_algo"
 +	proto_config_add_string "mesh_no_rebroadcast"
  }
  
@@ -17,10 +17,13 @@ index 632a209..01f567f 100644
  	local config="$1"
  	local iface="$2"
  
--	local mesh
--	json_get_vars mesh
-+	local mesh mesh_no_rebroadcast
-+	json_get_vars mesh mesh_no_rebroadcast
+-	local mesh routing_algo
+-	json_get_vars mesh routing_algo
++	local mesh routing_algo mesh_no_rebroadcast
++	json_get_vars mesh routing_algo mesh_no_rebroadcast
+ 
+ 	[ -n "$routing_algo" ] || routing_algo="BATMAN_IV"
+ 	echo "$routing_algo" > "/sys/module/batman_adv/parameters/routing_algo"
  
  	echo "$mesh" > "/sys/class/net/$iface/batman_adv/mesh_iface"
 +	[ -n "$mesh_no_rebroadcast" ] && echo "$mesh_no_rebroadcast" > "/sys/class/net/$iface/batman_adv/no_rebroadcast"
@@ -30,12 +33,12 @@ index 632a209..01f567f 100644
  }
 diff --git a/batman-adv/patches/1001-batman-adv-introduce-no_rebroadcast-option.patch b/batman-adv/patches/1001-batman-adv-introduce-no_rebroadcast-option.patch
 new file mode 100644
-index 0000000..f461ddc
+index 0000000..e9f5ffb
 --- /dev/null
 +++ b/batman-adv/patches/1001-batman-adv-introduce-no_rebroadcast-option.patch
-@@ -0,0 +1,172 @@
-+From a20c87779270f509227feecc4487e36a7d850c0f Mon Sep 17 00:00:00 2001
-+Message-Id: <a20c87779270f509227feecc4487e36a7d850c0f.1438892883.git.mschiffer@universe-factory.net>
+@@ -0,0 +1,189 @@
++From bb66988dc6972d5400b4ff4f0b49ed090007d635 Mon Sep 17 00:00:00 2001
++Message-Id: <bb66988dc6972d5400b4ff4f0b49ed090007d635.1466049319.git.mschiffer@universe-factory.net>
 +From: =?UTF-8?q?Linus=20L=C3=BCssing?= <linus.luessing@web.de>
 +Date: Tue, 24 Sep 2013 04:36:27 +0200
 +Subject: [PATCH 1/2] batman-adv: introduce 'no_rebroadcast' option
@@ -63,19 +66,22 @@ index 0000000..f461ddc
 +
 +Signed-off-by: Linus Lüssing <linus.luessing@web.de>
 +---
-+ .../ABI/testing/sysfs-class-net-batman-adv         | 10 ++++
++ .../ABI/testing/sysfs-class-net-batman-adv         | 11 ++++
 + net/batman-adv/hard-interface.c                    |  2 +
 + net/batman-adv/send.c                              |  4 ++
 + net/batman-adv/sysfs.c                             | 59 ++++++++++++++++++++++
 + net/batman-adv/types.h                             |  1 +
-+ 5 files changed, 76 insertions(+)
++ 5 files changed, 77 insertions(+)
 +
++diff --git a/Documentation/ABI/testing/sysfs-class-net-batman-adv b/Documentation/ABI/testing/sysfs-class-net-batman-adv
++index 518f6a1..896c480 100644
 +--- a/Documentation/ABI/testing/sysfs-class-net-batman-adv
 ++++ b/Documentation/ABI/testing/sysfs-class-net-batman-adv
-+@@ -13,3 +13,13 @@ Description:
++@@ -28,3 +28,14 @@ Description:
++                 The /sys/class/net/<iface>/batman-adv/mesh_iface file
 +                 displays the batman mesh interface this <iface>
 +                 currently is associated with.
-+ 
+++
 ++What:           /sys/class/net/<iface>/batman-adv/no_rebroadcast
 ++Date:           Sep 2013
 ++Contact:        Linus Lüssing <linus.luessing@web.de>
@@ -86,20 +92,24 @@ index 0000000..f461ddc
 ++                and symmetric only, for instance point-to-point wifi longshots
 ++                or wired links. Using this option wrongly is going to
 ++                break your mesh network, use at your own risk!
++diff --git a/net/batman-adv/hard-interface.c b/net/batman-adv/hard-interface.c
++index 8c2f399..48e53d0 100644
 +--- a/net/batman-adv/hard-interface.c
 ++++ b/net/batman-adv/hard-interface.c
-+@@ -639,6 +639,8 @@ batadv_hardif_add_interface(struct net_d
-+ 	/* extra reference for return */
-+ 	atomic_set(&hard_iface->refcount, 2);
++@@ -690,6 +690,8 @@ batadv_hardif_add_interface(struct net_device *net_dev)
++ 	kref_init(&hard_iface->refcount);
++ 	kref_get(&hard_iface->refcount);
 + 
 ++	atomic_set(&hard_iface->no_rebroadcast, 0);
 ++
 + 	batadv_check_known_mac_addr(hard_iface->net_dev);
 + 	list_add_tail_rcu(&hard_iface->list, &batadv_hardif_list);
 + 
++diff --git a/net/batman-adv/send.c b/net/batman-adv/send.c
++index f2f1256..3736d75 100644
 +--- a/net/batman-adv/send.c
 ++++ b/net/batman-adv/send.c
-+@@ -531,6 +531,10 @@ static void batadv_send_outstanding_bcas
++@@ -578,6 +578,10 @@ static void batadv_send_outstanding_bcast_packet(struct work_struct *work)
 + 		if (forw_packet->num_packets >= hard_iface->num_bcasts)
 + 			continue;
 + 
@@ -107,12 +117,14 @@ index 0000000..f461ddc
 ++		    forw_packet->skb->dev == hard_iface->net_dev)
 ++			continue;
 ++
-+ 		/* send a copy of the saved skb */
-+ 		skb1 = skb_clone(forw_packet->skb, GFP_ATOMIC);
-+ 		if (skb1)
++ 		if (!kref_get_unless_zero(&hard_iface->refcount))
++ 			continue;
++ 
++diff --git a/net/batman-adv/sysfs.c b/net/batman-adv/sysfs.c
++index 414b207..9aa043f 100644
 +--- a/net/batman-adv/sysfs.c
 ++++ b/net/batman-adv/sysfs.c
-+@@ -129,6 +129,17 @@ struct batadv_attribute batadv_attr_vlan
++@@ -134,6 +134,17 @@ struct batadv_attribute batadv_attr_vlan_##_name = {	\
 + 	.store  = _store,				\
 + }
 + 
@@ -130,9 +142,9 @@ index 0000000..f461ddc
 + /* Use this, if you have customized show and store functions */
 + #define BATADV_ATTR(_name, _mode, _show, _store)	\
 + struct batadv_attribute batadv_attr_##_name = {		\
-+@@ -239,6 +250,52 @@ ssize_t batadv_show_vlan_##_name(struct
-+ 	static BATADV_ATTR_VLAN(_name, _mode, batadv_show_vlan_##_name,	\
-+ 				batadv_store_vlan_##_name)
++@@ -293,6 +304,52 @@ ssize_t batadv_show_##_name(struct kobject *kobj,			\
++ 	static BATADV_ATTR(_name, _mode, batadv_show_##_name,		\
++ 			   batadv_store_##_name)
 + 
 ++#define BATADV_ATTR_HIF_STORE_BOOL(_name, _post_func)			\
 ++ssize_t batadv_store_hif_##_name(struct kobject *kobj,			\
@@ -150,7 +162,7 @@ index 0000000..f461ddc
 ++	res = __batadv_store_bool_attr(buff, count, _post_func,		\
 ++					      attr, &hard_iface->_name,	\
 ++					      hard_iface->soft_iface);	\
-++	batadv_hardif_free_ref(hard_iface);				\
+++	batadv_hardif_put(hard_iface);					\
 ++	return res;							\
 ++}
 ++
@@ -169,7 +181,7 @@ index 0000000..f461ddc
 ++	res = sprintf(buff, "%s\n",					\
 ++		      atomic_read(&hard_iface->_name) == 0 ?		\
 ++				"disabled" : "enabled");		\
-++	batadv_hardif_free_ref(hard_iface);				\
+++	batadv_hardif_put(hard_iface);					\
 ++	return res;							\
 ++}
 ++
@@ -182,27 +194,35 @@ index 0000000..f461ddc
 ++
 + static int batadv_store_bool_attr(char *buff, size_t count,
 + 				  struct net_device *net_dev,
-+ 				  const char *attr_name, atomic_t *attr)
-+@@ -863,10 +920,12 @@ static ssize_t batadv_show_iface_status(
++ 				  const char *attr_name, atomic_t *attr,
++@@ -993,6 +1050,7 @@ static ssize_t batadv_show_throughput_override(struct kobject *kobj,
 + static BATADV_ATTR(mesh_iface, S_IRUGO | S_IWUSR, batadv_show_mesh_iface,
 + 		   batadv_store_mesh_iface);
 + static BATADV_ATTR(iface_status, S_IRUGO, batadv_show_iface_status, NULL);
 ++BATADV_ATTR_HIF_BOOL(no_rebroadcast, S_IRUGO | S_IWUSR, NULL);
-+ 
++ #ifdef CONFIG_BATMAN_ADV_BATMAN_V
++ BATADV_ATTR_HIF_UINT(elp_interval, bat_v.elp_interval, S_IRUGO | S_IWUSR,
++ 		     2 * BATADV_JITTER, INT_MAX, NULL);
++@@ -1004,6 +1062,7 @@ static BATADV_ATTR(throughput_override, S_IRUGO | S_IWUSR,
 + static struct batadv_attribute *batadv_batman_attrs[] = {
 + 	&batadv_attr_mesh_iface,
 + 	&batadv_attr_iface_status,
 ++	&batadv_attr_hif_no_rebroadcast,
-+ 	NULL,
-+ };
-+ 
++ #ifdef CONFIG_BATMAN_ADV_BATMAN_V
++ 	&batadv_attr_elp_interval,
++ 	&batadv_attr_throughput_override,
++diff --git a/net/batman-adv/types.h b/net/batman-adv/types.h
++index ba846b0..1a596c5 100644
 +--- a/net/batman-adv/types.h
 ++++ b/net/batman-adv/types.h
-+@@ -115,6 +115,7 @@ struct batadv_hard_iface {
-+ 	struct batadv_hard_iface_bat_iv bat_iv;
-+ 	struct work_struct cleanup_work;
-+ 	struct dentry *debug_dir;
++@@ -156,6 +156,7 @@ struct batadv_hard_iface {
++ 	struct hlist_head neigh_list;
++ 	/* neigh_list_lock protects: neigh_list */
++ 	spinlock_t neigh_list_lock;
 ++	atomic_t no_rebroadcast;
 + };
 + 
 + /**
++-- 
++2.8.3
++
diff --git a/patches/packages/routing/0003-batman-adv-decrease-maximum-fragment-size.patch b/patches/packages/routing/0003-batman-adv-decrease-maximum-fragment-size.patch
index e7b5580..ede150b 100644
--- a/patches/packages/routing/0003-batman-adv-decrease-maximum-fragment-size.patch
+++ b/patches/packages/routing/0003-batman-adv-decrease-maximum-fragment-size.patch
@@ -4,14 +4,14 @@ Subject: batman-adv: decrease maximum fragment size
 
 diff --git a/batman-adv/patches/1002-batman-adv-decrease-maximum-fragment-size.patch b/batman-adv/patches/1002-batman-adv-decrease-maximum-fragment-size.patch
 new file mode 100644
-index 0000000..16cb023
+index 0000000..a97146b
 --- /dev/null
 +++ b/batman-adv/patches/1002-batman-adv-decrease-maximum-fragment-size.patch
-@@ -0,0 +1,23 @@
-+From 02c861b6aa334dff1ce8031ffc328924c78beec1 Mon Sep 17 00:00:00 2001
-+Message-Id: <02c861b6aa334dff1ce8031ffc328924c78beec1.1438892883.git.mschiffer@universe-factory.net>
-+In-Reply-To: <a20c87779270f509227feecc4487e36a7d850c0f.1438892883.git.mschiffer@universe-factory.net>
-+References: <a20c87779270f509227feecc4487e36a7d850c0f.1438892883.git.mschiffer@universe-factory.net>
+@@ -0,0 +1,28 @@
++From 9e7384fde3c5a71f733221a137fdc4593a9638be Mon Sep 17 00:00:00 2001
++Message-Id: <9e7384fde3c5a71f733221a137fdc4593a9638be.1466048916.git.mschiffer@universe-factory.net>
++In-Reply-To: <8e4c2084bbf2a65ad663a2b1ba27144e5dadfd5f.1466048916.git.mschiffer@universe-factory.net>
++References: <8e4c2084bbf2a65ad663a2b1ba27144e5dadfd5f.1466048916.git.mschiffer@universe-factory.net>
 +From: Matthias Schiffer <mschiffer@universe-factory.net>
 +Date: Thu, 6 Aug 2015 22:27:01 +0200
 +Subject: [PATCH 2/2] batman-adv: decrease maximum fragment size
@@ -20,9 +20,11 @@ index 0000000..16cb023
 + net/batman-adv/main.h | 2 +-
 + 1 file changed, 1 insertion(+), 1 deletion(-)
 +
++diff --git a/net/batman-adv/main.h b/net/batman-adv/main.h
++index 7692526..d314e6c 100644
 +--- a/net/batman-adv/main.h
 ++++ b/net/batman-adv/main.h
-+@@ -148,7 +148,7 @@ enum batadv_uev_type {
++@@ -159,7 +159,7 @@ enum batadv_uev_type {
 + /* Maximum number of fragments for one packet */
 + #define BATADV_FRAG_MAX_FRAGMENTS 16
 + /* Maxumim size of each fragment */
@@ -31,3 +33,6 @@ index 0000000..16cb023
 + /* Time to keep fragments while waiting for rest of the fragments */
 + #define BATADV_FRAG_TIMEOUT 10000
 + 
++-- 
++2.8.3
++
diff --git a/patches/packages/routing/0004-alfred-not-only-wait-for-the-interface-but-also-a-link-local-address.patch b/patches/packages/routing/0004-alfred-not-only-wait-for-the-interface-but-also-a-link-local-address.patch
deleted file mode 100644
index e6873c7..0000000
--- a/patches/packages/routing/0004-alfred-not-only-wait-for-the-interface-but-also-a-link-local-address.patch
+++ /dev/null
@@ -1,62 +0,0 @@
-From: Matthias Schiffer <mschiffer@universe-factory.net>
-Date: Sun, 9 Aug 2015 18:03:28 +0200
-Subject: alfred: not only wait for the interface, but also a link-local address
-
-Changes between alfred 2015.0 and 2015.1 cause alfred to print an error
-and exit when the interface to bind to is not completely set up (has no
-non-tentative link-local address). As a workaround, wait for such an
-address by reading /proc/net/if_inet6 before alfred is started.
-
-In the long term, it would be nice to make alfred more robust against
-missing interfaces (allowing alfred to start without the interface
-existing, and keeping it working even when the interface is removed and
-re-added while alfred is running).
-
-Signed-off-by: Matthias Schiffer <mschiffer@universe-factory.net>
-
-diff --git a/alfred/files/alfred.init b/alfred/files/alfred.init
-index 5ce06c0..8e1f11d 100755
---- a/alfred/files/alfred.init
-+++ b/alfred/files/alfred.init
-@@ -37,6 +37,32 @@ wait_for_dir()
- 	fi
- }
- 
-+wait_for_ll_address()
-+{
-+	local iface="$1"
-+	local timeout
-+
-+	timeout=30
-+	echo "${initscript}: waiting $timeout secs for $iface address..."
-+	for i in $(seq $timeout); do
-+		# We look for
-+		# - the link-local address (starts with fe80)
-+		# - without tentative flag (bit 0x40 in the flags field; the first char of the flags field begins 38 columns after the fe80 prefix
-+		# - on interface $iface
-+		if awk '
-+			BEGIN { RET=1 }
-+			/^fe80.{37} [012389ab]/ { if ($6 == "'"$iface"'") RET=0 }
-+			END { exit RET }
-+		' /proc/net/if_inet6; then
-+			return
-+		fi
-+		sleep 1
-+	done
-+
-+	echo "${initscript}: $iface address not detected, alfred not starting."
-+	exit 1
-+}
-+
- alfred_start()
- {
- 	local args=""
-@@ -62,7 +88,7 @@ alfred_start()
- 		wait_for_dir "$batmanif" "/sys/class/net/$batmanif/mesh"
- 	fi
- 
--	wait_for_dir "$interface" "/sys/class/net/$interface/"
-+	wait_for_ll_address "$interface"
- 
- 	append alfred_args "$args"
- 	enable=1
diff --git a/patches/packages/routing/0005-alfred-use-batman-adv-visdata.patch b/patches/packages/routing/0005-alfred-use-batman-adv-visdata.patch
deleted file mode 100644
index 6064774..0000000
--- a/patches/packages/routing/0005-alfred-use-batman-adv-visdata.patch
+++ /dev/null
@@ -1,83 +0,0 @@
-From: Matthias Schiffer <mschiffer@universe-factory.net>
-Date: Mon, 14 Dec 2015 03:08:42 +0100
-Subject: alfred: use batman-adv-visdata
-
-diff --git a/alfred/Makefile b/alfred/Makefile
-index 8f49b5a..f1d7c6e 100644
---- a/alfred/Makefile
-+++ b/alfred/Makefile
-@@ -28,7 +28,7 @@ define Package/alfred
-   SECTION:=net
-   CATEGORY:=Network
-   TITLE:=A.L.F.R.E.D. - Almighty Lightweight Fact Remote Exchange Daemon
--  DEPENDS:= +libc +kmod-ipv6 +librt \
-+  DEPENDS:= +libc +kmod-ipv6 +librt +batman-adv-visdata \
- 	  +ALFRED_NEEDS_lua:lua \
- 	  +ALFRED_NEEDS_libgps:libgps
- endef
-diff --git a/alfred/patches/0002-alfred-use-batman-adv-visdata.patch b/alfred/patches/0002-alfred-use-batman-adv-visdata.patch
-new file mode 100644
-index 0000000..a28b6a4
---- /dev/null
-+++ b/alfred/patches/0002-alfred-use-batman-adv-visdata.patch
-@@ -0,0 +1,60 @@
-+--- a/batadv_query.c
-++++ b/batadv_query.c
-+@@ -91,8 +91,10 @@ int ipv6_to_mac(const struct in6_addr *a
-+ int batadv_interface_check(const char *mesh_iface)
-+ {
-+ 	char *debugfs_mnt;
-++#if 0
-+ 	char full_path[MAX_PATH + 1];
-+ 	FILE *f;
-++#endif
-+ 
-+ 	debugfs_mnt = debugfs_mount(NULL);
-+ 	if (!debugfs_mnt) {
-+@@ -100,6 +102,7 @@ int batadv_interface_check(const char *m
-+ 		return -1;
-+ 	}
-+ 
-++#if 0
-+ 	debugfs_make_path(DEBUG_BATIF_PATH_FMT "/" DEBUG_TRANSTABLE_GLOBAL,
-+ 			  mesh_iface, full_path, sizeof(full_path));
-+ 	f = fopen(full_path, "r");
-+@@ -121,6 +124,7 @@ int batadv_interface_check(const char *m
-+ 		return -1;
-+ 	}
-+ 	fclose(f);
-++#endif
-+ 
-+ 	return 0;
-+ }
-+@@ -150,8 +154,7 @@ struct ether_addr *translate_mac(const c
-+ 	if (!debugfs_mnt)
-+ 		goto out;
-+ 
-+-	debugfs_make_path(DEBUG_BATIF_PATH_FMT "/" DEBUG_TRANSTABLE_GLOBAL,
-+-			  mesh_iface, full_path, sizeof(full_path));
-++	snprintf(full_path, sizeof(full_path), "/tmp/batman-adv-visdata/%s/transtable_global", mesh_iface);
-+ 
-+ 	f = fopen(full_path, "r");
-+ 	if (!f)
-+@@ -232,8 +235,7 @@ uint8_t get_tq(const char *mesh_iface, s
-+ 	if (!debugfs_mnt)
-+ 		goto out;
-+ 
-+-	debugfs_make_path(DEBUG_BATIF_PATH_FMT "/" DEBUG_ORIGINATORS,
-+-			  mesh_iface, full_path, sizeof(full_path));
-++	snprintf(full_path, sizeof(full_path), "/tmp/batman-adv-visdata/%s/originators", mesh_iface);
-+ 
-+ 	f = fopen(full_path, "r");
-+ 	if (!f)
-+--- a/vis/vis.c
-++++ b/vis/vis.c
-+@@ -325,7 +325,7 @@ static int parse_orig_list(struct global
-+ 	char path[1024];
-+ 	struct vis_list_entry *v_entry;
-+ 
-+-	snprintf(path, sizeof(path), "/sys/kernel/debug/batman_adv/%s/originators", globals->interface);
-++	snprintf(path, sizeof(path), "/tmp/batman-adv-visdata/%s/originators", globals->interface);
-+ 	fbuf = read_file(path);
-+ 	if (!fbuf)
-+ 		return -1;
-- 
2.9.0

